diff --git a/wifi/wifi.c b/wifi/wifi.c
index 656659f..23acddb 100644
--- a/wifi/wifi.c
+++ b/wifi/wifi.c
@@ -55,6 +55,7 @@ static int exit_sockets[MAX_CONNS][2];
 
 extern int do_dhcp();
 extern int ifc_init();
+extern int ifc_up(const char *);
 extern void ifc_close();
 extern char *dhcp_lasterror();
 extern void get_dhcp_info();
@@ -96,7 +97,7 @@ static const char EXT_MODULE_PATH[] = WIFI_EXT_MODULE_PATH;
 #endif
 
 #ifndef WIFI_DRIVER_FW_PATH_PARAM
-#define WIFI_DRIVER_FW_PATH_PARAM	"/sys/module/wlan/parameters/fwpath"
+#define WIFI_DRIVER_FW_PATH_PARAM	NULL
 #endif
 
 static const char IFACE_DIR[]           = "/data/system/wpa_supplicant";
@@ -170,6 +171,7 @@ static int insmod(const char *filename, const char *args)
     unsigned int size;
     int ret;
 
+    ALOGI("load driver module %s", filename);
     module = load_file(filename, &size);
     if (!module)
         return -1;
@@ -186,6 +188,7 @@ static int rmmod(const char *modname)
     int ret = -1;
     int maxtry = 10;
 
+    ALOGI("unload driver module %s", modname);
     while (maxtry-- > 0) {
         ret = delete_module(modname, O_NONBLOCK | O_EXCL);
         if (ret < 0 && errno == EAGAIN)
@@ -224,6 +227,7 @@ const char *get_dhcp_error_string() {
 
 int is_wifi_driver_loaded() {
     char driver_status[PROPERTY_VALUE_MAX];
+    ALOGI("is wifi driver loaded entered");
 #ifdef WIFI_DRIVER_MODULE_PATH
     FILE *proc;
     char line[sizeof(DRIVER_MODULE_TAG)+10];
@@ -261,6 +265,7 @@ int is_wifi_driver_loaded() {
 
 int wifi_load_driver()
 {
+    ALOGI("wifi load driver entered");
 #ifdef WIFI_DRIVER_MODULE_PATH
     char driver_status[PROPERTY_VALUE_MAX];
     int count = 100; /* wait at most 20 seconds for completion */
@@ -323,6 +328,7 @@ int wifi_load_driver()
 
 int wifi_unload_driver()
 {
+    ALOGI("wifi unload driver entered");
     usleep(200000); /* allow to finish interface down */
 #ifdef WIFI_DRIVER_MODULE_PATH
     if (rmmod(DRIVER_MODULE_NAME) == 0) {
@@ -353,6 +359,7 @@ int ensure_entropy_file_exists()
     int ret;
     int destfd;
 
+    ALOGI("ensure entropy file exists entered");
     ret = access(SUPP_ENTROPY_FILE, R_OK|W_OK);
     if ((ret == 0) || (errno == EACCES)) {
         if ((ret != 0) &&
@@ -401,6 +408,7 @@ int update_ctrl_interface(const char *config_file) {
     char *sptr;
     struct stat sb;
 
+    ALOGI("update control interface entered: %s", config_file);
     if (stat(config_file, &sb) != 0)
         return -1;
 
@@ -461,6 +469,7 @@ int ensure_config_file_exists(const char *config_file)
     int nread;
     int ret;
 
+    ALOGI("ensure config file exists entered: %s", config_file);
     ret = access(config_file, R_OK|W_OK);
     if ((ret == 0) || (errno == EACCES)) {
         if ((ret != 0) &&
@@ -540,6 +549,7 @@ void wifi_wpa_ctrl_cleanup(void)
     char *local_socket_dir = CONFIG_CTRL_IFACE_CLIENT_DIR;
     char *local_socket_prefix = CONFIG_CTRL_IFACE_CLIENT_PREFIX;
 
+    ALOGI("wpa conntrol cleanup entered");
     if ((dir = opendir(local_socket_dir)) == NULL)
         return;
 
@@ -569,6 +579,7 @@ int wifi_start_supplicant(int p2p_supported)
     unsigned serial = 0, i;
 #endif
 
+    ALOGI("start supplicant entered, p2p: %d", p2p_supported);
     if (p2p_supported) {
         strcpy(supplicant_name, P2P_SUPPLICANT_NAME);
         strcpy(supplicant_prop_name, P2P_PROP_NAME);
@@ -624,7 +635,8 @@ int wifi_start_supplicant(int p2p_supported)
 
 #ifdef WIFI_DRIVER_MODULE_PATH
     /* The ar6k driver needs the interface up in order to scan! */
-    if (!strncmp(DRIVER_MODULE_NAME, "ar6000", 6)) {
+    if (!strncmp(DRIVER_MODULE_NAME, "ath6kl", 6)) {
+        ALOGI("early wlan0 interface up for module: %s", DRIVER_MODULE_NAME);
         ifc_init();
         ifc_up("wlan0");
         sleep(2);
@@ -666,6 +678,7 @@ int wifi_stop_supplicant()
     char supp_status[PROPERTY_VALUE_MAX] = {'\0'};
     int count = 50; /* wait at most 5 seconds for completion */
 
+    ALOGI("stop supplicant entered");
     /* Check whether supplicant already stopped */
     if (property_get(supplicant_prop_name, supp_status, NULL)
         && strcmp(supp_status, "stopped") == 0) {
@@ -689,6 +702,7 @@ int wifi_connect_on_socket_path(int index, const char *path)
 {
     char supp_status[PROPERTY_VALUE_MAX] = {'\0'};
 
+    ALOGI("connect on socket path entered, path: %s", path);
     /* Make sure supplicant is running */
     if (!property_get(supplicant_prop_name, supp_status, NULL)
             || strcmp(supp_status, "running") != 0) {
@@ -730,6 +744,7 @@ int wifi_connect_to_supplicant(const char *ifname)
 {
     char path[256];
 
+    ALOGI("connect to supplicant entered, ifname: %s", ifname);
     if (is_primary_interface(ifname)) {
         if (access(IFACE_DIR, F_OK) == 0) {
             snprintf(path, sizeof(path), "%s/%s", IFACE_DIR, primary_iface);
@@ -799,6 +840,7 @@ int wifi_wait_on_socket(int index, char *buf, size_t buflen)
     struct timeval tval;
     struct timeval *tptr;
 
+    ALOGI("wait on socket entered");
     if (monitor_conn[index] == NULL) {
         ALOGD("Connection closed\n");
         strncpy(buf, WPA_EVENT_TERMINATING " - connection closed", buflen-1);
@@ -861,6 +903,7 @@ int wifi_wait_for_event(const char *ifname, char *buf, size_t buflen)
 
 void wifi_close_sockets(int index)
 {
+    ALOGI("close sockets entered");
     if (ctrl_conn[index] != NULL) {
         wpa_ctrl_close(ctrl_conn[index]);
         ctrl_conn[index] = NULL;
@@ -884,6 +927,7 @@ void wifi_close_sockets(int index)
 
 void wifi_close_supplicant_connection(const char *ifname)
 {
+    ALOGI("close supplicant connection: ifname: %s", ifname);
     char supp_status[PROPERTY_VALUE_MAX] = {'\0'};
     int count = 50; /* wait at most 5 seconds to ensure init has stopped stupplicant */
 
@@ -911,6 +955,7 @@ void wifi_close_supplicant_connection(const char *ifname)
 
 int wifi_command(const char *ifname, const char *command, char *reply, size_t *reply_len)
 {
+    ALOGI("command %s, ifname: %s", command, ifname);
     if (is_primary_interface(ifname)) {
         return wifi_send_command(PRIMARY, command, reply, reply_len);
     } else {
@@ -920,6 +965,7 @@ int wifi_command(const char *ifname, const char *command, char *reply, size_t *r
 
 const char *wifi_get_fw_path(int fw_type)
 {
+    ALOGI("get fw path: %d", fw_type);
     switch (fw_type) {
     case WIFI_GET_FW_PATH_STA:
         return WIFI_DRIVER_FW_PATH_STA;
@@ -933,10 +979,13 @@ const char *wifi_get_fw_path(int fw_type)
 
 int wifi_change_fw_path(const char *fwpath)
 {
+    ALOGI("change fw path: %s", fwpath);
     int len;
     int fd;
     int ret = 0;
 
+    if (WIFI_DRIVER_FW_PATH_PARAM == NULL)
+        return ret;
     if (!fwpath)
         return ret;
     fd = TEMP_FAILURE_RETRY(open(WIFI_DRIVER_FW_PATH_PARAM, O_WRONLY));
